version: 1.0.0
services:
  - mysql

variables:
  global:
    COMPOSER_BIN: $BUILD_DIR/vendor/bin
    BLT_DIR: $BUILD_DIR/vendor/acquia/blt

events:
  build:
    steps:
        # Install global packages and set global configuration.
        - setup:
            type: script
            script:
              - set -x
              - composer self-update
              - composer validate --no-check-all --ansi
              - composer install
              - source ${BLT_DIR}/scripts/pipelines/setup_environment
              - source ${BLT_DIR}/scripts/pipelines/setup_project
              - composer install-phantomjs

        # Install Lightning and setup behat config.
        - configure-behat:
            type: script
            script:
              - set -x
              - cd ./docroot
              # Install Lightning.
              - /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`" ../vendor/bin/drush site-install lightning --db-url=mysql://root:root@127.0.0.1/drupal --yes
              # Lightning Dev will automatically scan for feature files in
              # enabled extensions and generate a behat configuration file based
              # on the results.
              - ../vendor/bin/drush pm-enable lightning_dev --yes

        # Execute all testing and validation tasks.
        - run-tests:
            type: script
            script:
              - set -x
              - ../vendor/bin/drush runserver --default-server=builtin 8080 &>/dev/null &
              - ../vendor/bin/phantomjs --webdriver=4444 > /dev/null &
              - sleep 10
              # Run two specific Lightning tests:
              # - Panelizer is enabled for landing pages (1e244c89)
              # - Uploading an image to be ignored by the media library (b23435a5)
              - ../vendor/bin/behat --config ./sites/default/files/behat.yml --tags=1e244c89,b23435a5

        # Generate artifact.
        - build-artifact:
            type: script
            script:
              - set -x
              #- source ${BLT_DIR}/scripts/pipelines/build_artifact

        # Deploy the build artifact to a Cloud on-demand environment.
        - deploy:
            script:
              - pipelines-deploy

  # When a GitHub pull request is merged, this deletes the coresponding ODE.
  pr-merged:
    steps:
        - deploy:
            script:
              - pipelines-deploy

  # When a GitHub pull request is closed, this deletes the corresponding ODE.
  pr-closed:
    steps:
        - deploy:
            script:
              - pipelines-deploy
